<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gridX = 0;
gridY = 0;

hoverNode = noone;

selectedActor = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = mouse_x;
y = mouse_y;

gridX = floor(x/GRID_SIZE);
gridY = floor(y/GRID_SIZE);

if(gridX &lt; 0 || gridY &lt; 0 || gridX &gt;= room_width/GRID_SIZE || gridY &gt;= room_height/GRID_SIZE) {
    ///if we're out of bounds
    hoverNode = noone;
} else {
    hoverNode = map[gridX, gridY];
}

if(mouse_check_button_pressed(mb_right)) {
    if(selectedActor != noone &amp;&amp; hoverNode.moveNode) {
        current = hoverNode;        

        create_path(selectedActor, current);
        
        //first clear the node of selectedActor
        map[selectedActor.gridX, selectedActor.gridY].occupant = noone;

        //update selectedActor's coords
        selectedActor.gridX = gridX;
        selectedActor.gridY = gridY;
        
        //update selectedActor's future node
        hoverNode.occupant = selectedActor;
        
        //send selectedActor on their way
        selectedActor.state = "begin path";
        selectedActor.endPath = "ready";        
        
        //reduce selectedActor's actions and wipe nodes
        if(hoverNode.G &gt; selectedActor.move) {
            selectedActor.actions -= 2;
            wipe_nodes();
        } else {
            selectedActor.actions -= 1;
            wipe_nodes();
        }
        selectedActor = noone;
    }
    
    if(selectedActor != noone &amp;&amp; hoverNode.attackNode){
        switch(selectedActor.attackType) {
            case "ranged":
                selectedActor.canAct = false;
                selectedActor.actions -= 1;
                selectedActor.attackTarget = hoverNode.occupant;
                selectedActor.state = "begin attack";
                selectedActor.attackTimer = 10;
                
                selectedActor = noone;
                wipe_nodes();
                break;
                
            case "melee":
                selectedActor.canAct = false;
                selectedActor.attackTarget = hoverNode.occupant;
                
                tempX = abs(hoverNode.gridX - selectedActor.gridX);
                tempY = abs(hoverNode.gridY - selectedActor.gridY);
                
                if(tempX &lt;=1 &amp;&amp; tempY &lt;= 1){
                    selectedActor.actions -= 1;
                    selectedActor.state = "begin attack";
                    selectedActor.attackTimer = 10;
                    
                    selectedActor = noone;
                    wipe_nodes();
                    
                } else {
                    tempG = 100;
                    current = noone;
                    
                    for (ii = 0; ii &lt; ds_list_size(hoverNode.neighbors); ii += 1){
                        tempNode = ds_list_find_value(hoverNode.neighbors, ii);
                        
                        if(tempNode.occupant == noone &amp;&amp; tempNode.G &gt; 0 &amp;&amp; tempNode.G &lt; tempG){
                            tempG = tempNode.G;
                            current = tempNode;
                        }
                    }
                    
                    targetNode = current;
                    
                    create_path(selectedActor, targetNode);
                    
                    //first clear the node of selectedActor
                    map[selectedActor.gridX, selectedActor.gridY].occupant = noone;
            
                    //update selectedActor's coords
                    selectedActor.gridX = targetNode.gridX;
                    selectedActor.gridY = targetNode.gridY;
                    
                    //update selectedActor's future node
                    targetNode.occupant = selectedActor;
                    
                    //send selectedActor on their way
                    selectedActor.state = "begin path";
                    selectedActor.endPath = "begin attack";
                    selectedActor.attackTarget = hoverNode.occupant;
                    selectedActor.actions -= 2;
                    selectedActor.canAct = false;
                    
                    selectedActor = noone;
                    wipe_nodes();
                    
                }
                
                break;                       
        }
    }
}














</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hoverNode != noone) {
    draw_sprite(sSelected, -1, gridX * GRID_SIZE, gridY * GRID_SIZE);
}

draw_self();

if(hoverNode != noone) {
    tempText = "coords: " + string(gridX) + " / " + string(gridY);
    if(hoverNode.occupant != noone) {
        tempText += " occupant: " + hoverNode.occupant.name;
    }
    
    draw_set_color(c_black);
    draw_rectangle(0, 0, string_width(tempText), string_height(tempText), false);

    draw_set_color(c_white);
    draw_text(0, 0, tempText);
    
    tempText = hoverNode.type;
    if(hoverNode.passable) {
        tempText += " passable = true, cost = " + string(hoverNode.cost);
    }
    draw_set_color(c_black);
    draw_rectangle(0, 20, string_width(tempText), 2 * string_height(tempText), false);
    draw_set_color(c_white);    
    draw_text(0, 20, tempText);
}

if(selectedActor != noone) {
    tempText = selectedActor.name + " the " + selectedActor.race + " " + selectedActor.class;
    tempHitPoints = "HP: " + string(selectedActor.hitPoints) + " / " + string(selectedActor.maxHitPoints);
    tempHitBonus = "HitBonus: " + string(selectedActor.hitBonus);

    draw_set_color(c_black);
    draw_rectangle(0, room_height, string_width(tempHitBonus), room_height - string_height(tempHitBonus), false);
    draw_rectangle(0, room_height - GRID_SIZE/2, string_width(tempHitPoints), room_height - GRID_SIZE/2 - string_height(tempHitPoints), false);
    draw_rectangle(0, room_height - GRID_SIZE, string_width(tempText), room_height - GRID_SIZE - string_height(tempText), false);
    
    draw_set_color(c_white);
    draw_text(0, room_height - string_height(tempHitBonus), tempHitBonus);
    draw_text(0, room_height - GRID_SIZE/2 - string_height(tempHitPoints), tempHitPoints);
    draw_text(0, room_height - GRID_SIZE - string_height(tempText), tempText);
}











</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
