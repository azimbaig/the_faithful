<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = "idle";

army = "RED_ARMY";

gridX = 0;
gridY = 0;

name = "Error";

class = "Peasant";

race = "Human";

//Character stats
level = 1;

//Base stats
profMod = 2 + floor(level/5);

strMod = 0; //strength
dexMod = 0; //dexterity
conMod = 0; //constitution
intMod = 0; //intellect
wisMod = 0; //wisdom

//Health stats
maxHitPoints = 4 + conMod + ((level - 1) * (3 + conMod));
hitPoints = maxHitPoints;

//Attack variables
hitBonus = profMod + strMod;
attackType = "melee";
attackRange = GRID_SIZE;
attackTarget = noone;
attackTimer = 0;

//Damage variables
damageDice = 4;
damageBonus = strMod;
damageType = "piercing";

//Defense variables
armorClass = 10 + dexMod;

//Move and Actions variables
move = 5; //how many squares the char can move
actions = 2; //how many times the char can move or attack per turn
canAct = false;

initiative = dexMod;
initRoll = 0;

//pathing variables
movementPath = path_add(); //create path data structure
path_set_kind(movementPath, 2); //type 2 is a more rounded path
path_set_closed(movementPath, false); //a closed path is looped - we don't want that

moveSpeed = 8; //speed in pixels per step

//variables related to effects
shake = 0;
shakeMag = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shake -= 1;

//state machine
switch(state) {
    case "begin path":
        //begin moving along path
        path_start(movementPath, moveSpeed, 0, true);
        state = "moving";
        break;
    
    case "begin attack":
        attackTimer -= 1;
        if(attackTimer &lt;= 0){
            state = "attack";
        }        
        break;
        
    case "attack":
        switch(attackType){
            case "ranged":
                attackRoll = irandom_range(1, 20);
                
                //determine outcome of roll
                if(attackRoll == 20){
                    attackStatus = "crit";
                } else {
                    if(attackRoll + hitBonus &gt;= attackTarget.armorClass){
                        attackStatus = "hit";
                    } else {
                        attackStatus = "miss";
                    }
                }
                
                tempDamage = 0;
                
                //make damage roll
                if(attackStatus != "miss"){
                    tempDamage = irandom_range(1, damageDice) + damageBonus;
                    if(attackStatus == "crit"){
                        tempDamage += irandom_range(1, damageDice);
                    }
                } 
                  
                attackDir = point_direction(x + GRID_SIZE/2, y + GRID_SIZE/2, attackTarget.x + GRID_SIZE/2, attackTarget.y + GRID_SIZE/2); //Dir for Direction
                
                // lengthdir_ return the x coordinate from a point of certain distance away(30px)
                // at a certain attack direction. it always assumes that it starts with 0
                beginX = x + GRID_SIZE/2 + lengthdir_x(30, attackDir);
                beginY = y + GRID_SIZE/2 + lengthdir_y(30, attackDir);
                   
                with(instance_create(beginX, beginY, oArrow)){
                    target = other.attackTarget;
                    status = other.attackStatus;
                    damage = other.tempDamage;
                    damageType = other.damageType;
                    
                    path_add_point(movementPath, other.beginX, other.beginY, 100);
                    
                    if(status != "miss"){
                        path_add_point(movementPath, target.x + GRID_SIZE/2, target.y + GRID_SIZE/2, 100);
                    } else {
                        path_add_point(movementPath, target.x + (irandom_range(30, 50) * choose(-1, 1)), target.y + (irandom_range(30, 50) * choose(-1, 1)), -100);
                    }
                    
                    path_start(movementPath, speed, true, true);
                }
                
                state = "end attack";
                
                attackTimer = 30;
                   
                break;
        }       
        break;
        
    case "end attack":
        attackTimer -= 1;
        
        if(attackTimer &lt;= 0){
            if(actions &gt; 0){
                oCursor.selectedActor = id; // id - that's us
                movement_range(map[gridX, gridY], move, actions);
            } else {
                oGame.currentActor = noone;   
            }             
            
            state = "idle";
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//clear path
path_clear_points(movementPath);

state = "idle";

if(actions &gt; 0) {
    oCursor.selectedActor = id;
    movement_range(map[gridX, gridY], move, actions);
    
    if(canAct) {
        switch(attackType) {
            case "ranged":
                ranged_attack_range(id);
                break;
        }
    }
} else {
    oGame.currentActor = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(oCursor.selectedActor == id) {
    //if cursor is hover on a node different from actor's
    if(oCursor.hoverNode != noone ) {
        tempNode = oCursor.hoverNode;
    
        //draw the path that the character will take
        if(tempNode.moveNode) {
            current = tempNode;
            //loop through ALL nodes, parent to parent, until we reach the actor's node
            while(current.parent != noone) {
                draw_line_width_colour(current.x + GRID_SIZE/2, current.y + GRID_SIZE/2, current.parent.x + GRID_SIZE/2, current.parent.y + GRID_SIZE/2, 4, c_lime, c_lime);
                current = current.parent;
            }
        }
        
        //draw the path of the ranged attack
        if(tempNode.attackNode) {
            switch(attackType) {
                case "ranged":
                    draw_line_width_colour(x + GRID_SIZE/2, y + GRID_SIZE/2, tempNode.x + GRID_SIZE/2, tempNode.y + GRID_SIZE/2, 4, c_purple, c_purple);
                    break;
            }
        }
    }
}

if(shake &gt; 0){
    draw_sprite_ext(sprite_index, -1, x + irandom_range(-shakeMag, shakeMag), y + irandom_range(-shakeMag, shakeMag), 1, 1, 0, c_white, 1);
} else {
    draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
