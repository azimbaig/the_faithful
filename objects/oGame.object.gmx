<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = "initializing";

globalvar map;

mapWidth = room_width/GRID_SIZE;
mapHeight = room_height/GRID_SIZE;

///create nodes
for(xx = 0; xx &lt; mapWidth; xx += 1) {
    for(yy = 0; yy &lt; mapHeight; yy += 1) {
        map[xx, yy] = instance_create(xx * GRID_SIZE, yy * GRID_SIZE, oNode);
    }
}

///populate neighbor lists
for(xx = 0; xx &lt; mapWidth; xx += 1) {
    for(yy = 0; yy &lt; mapHeight; yy += 1) {   
        node = map[xx, yy];
        
        ///add left neighbor
        if(xx &gt; 0) {
            ds_list_add(node.neighbors, map[xx - 1, yy]);
        }
        
        ///add right neighbor        
        if(xx &lt; mapWidth - 1) {
            ds_list_add(node.neighbors, map[xx + 1, yy]);
        }
        
        ///add top neighbor        
        if(yy &gt; 0) {
            ds_list_add(node.neighbors, map[xx, yy - 1]);
        }
        
        ///add bottom neighbor        
        if(yy &lt; mapHeight - 1) {
            ds_list_add(node.neighbors, map[xx, yy + 1]);
        }
        
        ///add top left neighbor        
        if(xx &gt; 0 &amp;&amp; yy &gt; 0) {
            ds_list_add(node.neighbors, map[xx - 1, yy - 1]);
        }
        
        ///add top right neighbor        
        if(xx &lt; mapWidth - 1 &amp;&amp; yy &gt; 0) {
            ds_list_add(node.neighbors, map[xx + 1, yy - 1]);
        }
        
        ///add bottom left neighbor        
        if(xx &gt; 0 &amp;&amp; yy &lt; mapHeight - 1) {
            ds_list_add(node.neighbors, map[xx - 1, yy + 1]);
        }
        
        ///add bottom right neighbor        
        if(xx &lt; mapWidth - 1 &amp;&amp; yy &lt; mapHeight - 1) {
            ds_list_add(node.neighbors, map[xx + 1, yy + 1]);
        }
    }
}

instance_create(x, y, oCursor);

with(instance_create(5 * GRID_SIZE, 5 * GRID_SIZE, oHero)) {
    gridX = 5;
    gridY = 5;
    name = "Sandy";
    map[gridX, gridY].occupant = id;
}

with(instance_create(5 * GRID_SIZE, 8 * GRID_SIZE, oHero)) {
    gridX = 5;
    gridY = 8;
    name = "Danny";
    map[gridX, gridY].occupant = id;
}











</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(state) {
    case "initializing":
        with(oNode) {
            if(instance_position(x + 16, y + 16, oTerrain)) {
                tempTerrain = instance_position(x + 16, y + 16, oTerrain);
        
                switch(tempTerrain.type) {
                    case "rock": 
                        type = "rock";
                        sprite_index  = sRock;
                        passable = false;
        
                        break;
                    case "rubble":
                        type = "rubble";
                        sprite_index = sRubble;
                        passable = true;
                        cost = 2;
        
                        break;
        
                    case "grass":
                        type = "grass";
                        sprite_index = sGrass;
                        passable = true;
                        cost = 1;
                }
        
                with(tempTerrain) {
                    instance_destroy();
                }
            }
        }
        state = "ready";
        break;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
